{"ast":null,"code":"var _jsxFileName = \"/workspaces/cardology/src/App.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// ... (keep all existing code unchanged)\n\nfunction calculatePlanetaryDays(birthDate) {\n  const planets = ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  const today = new Date();\n  const birthDayOfWeek = birthDate.getDay();\n  const startDayOfWeek = today.getDay();\n  let mercuryDay = new Date(today);\n  mercuryDay.setDate(today.getDate() - (startDayOfWeek - birthDayOfWeek + 7) % 7);\n  const planetaryDays = [];\n  planets.forEach((planet, index) => {\n    let planetDay = new Date(mercuryDay);\n    planetDay.setDate(mercuryDay.getDate() + index);\n    planetaryDays.push({\n      planet: planet,\n      date: planetDay.toDateString()\n    });\n  });\n  return planetaryDays;\n}\n\n// Modify the App component\nconst App = () => {\n  _s();\n  // ... (keep all existing state variables)\n  const [planetaryDays, setPlanetaryDays] = useState([]);\n\n  // ... (keep all existing functions)\n\n  // Modify handleWeeklyPlateClick function\n  const handleWeeklyPlateClick = () => {\n    // ... (keep existing code)\n    if (card) {\n      // ... (keep existing code)\n      if (position) {\n        // ... (keep existing code)\n        setWeeklyPlanetCards(planetCards);\n\n        // Calculate planetary days\n        const birthDateObj = new Date(birthdate);\n        const calculatedPlanetaryDays = calculatePlanetaryDays(birthDateObj);\n        setPlanetaryDays(calculatedPlanetaryDays);\n      }\n    } else {\n      // ... (keep existing code)\n      setWeeklyPlanetCards([]);\n      setPlanetaryDays([]);\n    }\n  };\n\n  // ... (keep all other existing code)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: weeklyPlanetCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weekly-planet-cards\",\n      style: {\n        marginTop: '20px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Weekly Planet Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          flexWrap: 'wrap',\n          gap: '5px'\n        },\n        children: weeklyPlanetCards.map((card, index) => {\n          var _planetaryDays$index;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center',\n              width: '60px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                border: '1px solid black',\n                padding: '5px',\n                marginBottom: '2px',\n                backgroundColor: highlightedCards.includes(card) ? 'yellow' : 'white',\n                color: getCardColor(card)\n              },\n              children: card\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: '0.8em'\n              },\n              children: (_planetaryDays$index = planetaryDays[index]) === null || _planetaryDays$index === void 0 ? void 0 : _planetaryDays$index.planet\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                fontSize: '0.8em'\n              },\n              children: planetaryDays[index] ? new Date(planetaryDays[index].date).toLocaleDateString('en-US', {\n                month: 'numeric',\n                day: 'numeric'\n              }) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"TuCrfi+jkZC/tk2T9dHz7BDBXU4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["calculatePlanetaryDays","birthDate","planets","today","Date","birthDayOfWeek","getDay","startDayOfWeek","mercuryDay","setDate","getDate","planetaryDays","forEach","planet","index","planetDay","push","date","toDateString","App","_s","setPlanetaryDays","useState","handleWeeklyPlateClick","card","position","setWeeklyPlanetCards","planetCards","birthDateObj","birthdate","calculatedPlanetaryDays","_jsxDEV","className","children","weeklyPlanetCards","length","style","marginTop","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","flexWrap","gap","map","_planetaryDays$index","width","border","padding","marginBottom","backgroundColor","highlightedCards","includes","color","getCardColor","fontSize","toLocaleDateString","month","day","_c","$RefreshReg$"],"sources":["/workspaces/cardology/src/App.js"],"sourcesContent":["// ... (keep all existing code unchanged)\n\nfunction calculatePlanetaryDays(birthDate) {\n    const planets = ['Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    const today = new Date();\n    const birthDayOfWeek = birthDate.getDay();\n    const startDayOfWeek = today.getDay();\n    let mercuryDay = new Date(today);\n    mercuryDay.setDate(today.getDate() - ((startDayOfWeek - birthDayOfWeek + 7) % 7));\n\n    const planetaryDays = [];\n\n    planets.forEach((planet, index) => {\n        let planetDay = new Date(mercuryDay);\n        planetDay.setDate(mercuryDay.getDate() + index);\n        planetaryDays.push({ planet: planet, date: planetDay.toDateString() });\n    });\n\n    return planetaryDays;\n}\n\n// Modify the App component\nconst App = () => {\n  // ... (keep all existing state variables)\n  const [planetaryDays, setPlanetaryDays] = useState([]);\n\n  // ... (keep all existing functions)\n\n  // Modify handleWeeklyPlateClick function\n  const handleWeeklyPlateClick = () => {\n    // ... (keep existing code)\n    if (card) {\n      // ... (keep existing code)\n      if (position) {\n        // ... (keep existing code)\n        setWeeklyPlanetCards(planetCards);\n\n        // Calculate planetary days\n        const birthDateObj = new Date(birthdate);\n        const calculatedPlanetaryDays = calculatePlanetaryDays(birthDateObj);\n        setPlanetaryDays(calculatedPlanetaryDays);\n      }\n    } else {\n      // ... (keep existing code)\n      setWeeklyPlanetCards([]);\n      setPlanetaryDays([]);\n    }\n  };\n\n  // ... (keep all other existing code)\n\n  return (\n    <div className=\"App\">\n      {/* ... (keep all existing JSX) */}\n\n      {/* Update the weekly planet cards section */}\n      {weeklyPlanetCards.length > 0 && (\n        <div className=\"weekly-planet-cards\" style={{ marginTop: '20px', textAlign: 'center' }}>\n          <h2>Weekly Planet Cards</h2>\n          <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', gap: '5px' }}>\n            {weeklyPlanetCards.map((card, index) => (\n              <div key={index} style={{ textAlign: 'center', width: '60px' }}>\n                <div style={{\n                  border: '1px solid black',\n                  padding: '5px',\n                  marginBottom: '2px',\n                  backgroundColor: highlightedCards.includes(card) ? 'yellow' : 'white',\n                  color: getCardColor(card)\n                }}>\n                  {card}\n                </div>\n                <div style={{ fontSize: '0.8em' }}>{planetaryDays[index]?.planet}</div>\n                <div style={{ fontSize: '0.8em' }}>\n                  {planetaryDays[index] ? new Date(planetaryDays[index].date).toLocaleDateString('en-US', { month: 'numeric', day: 'numeric' }) : ''}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* ... (keep all other existing JSX) */}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}